// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'models/category_model.dart';
import 'models/item_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1),
      name: 'ItemModel',
      lastPropertyId: const IdUid(13, 6360886999102967732),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5091833582595000145),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5567967101169069717),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6237766341484770791),
            name: 'categoryId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1316117860719580966),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3281031069139026457),
            name: 'sku',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3031082735870309557),
            name: 'inStock',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8505922527942481988),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6360886999102967732),
            name: 'camePrice',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2),
      name: 'CategoryModel',
      lastPropertyId: const IdUid(3, 2195525450338866722),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2362547254871873175),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9060144846718546040),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2195525450338866722),
            name: 'categoryId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        446884374385899978,
        5788714194364162302,
        6844864203558446880,
        3152028102970280835,
        1656887686332265436
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ItemModel: EntityDefinition<ItemModel>(
        model: _entities[0],
        toOneRelations: (ItemModel object) => [],
        toManyRelations: (ItemModel object) => {},
        getId: (ItemModel object) => object.id,
        setId: (ItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (ItemModel object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeString(object.categoryId!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(4, categoryIdOffset);
          fbb.addOffset(8, barcodeOffset);
          fbb.addInt64(9, object.sku);
          fbb.addInt64(10, object.inStock);
          fbb.addInt64(11, object.price);
          fbb.addInt64(12, object.camePrice);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ItemModel(
              barcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              camePrice: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 28),
              categoryId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              inStock: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              price: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              sku: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22));

          return object;
        }),
    CategoryModel: EntityDefinition<CategoryModel>(
        model: _entities[1],
        toOneRelations: (CategoryModel object) => [],
        toManyRelations: (CategoryModel object) => {},
        getId: (CategoryModel object) => object.id,
        setId: (CategoryModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final categoryIdOffset = fbb.writeString(object.categoryId);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, categoryIdOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CategoryModel(
              categoryId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ItemModel] entity fields to define ObjectBox queries.
class ItemModel_ {
  /// see [ItemModel.id]
  static final id = QueryIntegerProperty<ItemModel>(_entities[0].properties[0]);

  /// see [ItemModel.name]
  static final name =
      QueryStringProperty<ItemModel>(_entities[0].properties[1]);

  /// see [ItemModel.categoryId]
  static final categoryId =
      QueryStringProperty<ItemModel>(_entities[0].properties[2]);

  /// see [ItemModel.barcode]
  static final barcode =
      QueryStringProperty<ItemModel>(_entities[0].properties[3]);

  /// see [ItemModel.sku]
  static final sku =
      QueryIntegerProperty<ItemModel>(_entities[0].properties[4]);

  /// see [ItemModel.inStock]
  static final inStock =
      QueryIntegerProperty<ItemModel>(_entities[0].properties[5]);

  /// see [ItemModel.price]
  static final price =
      QueryIntegerProperty<ItemModel>(_entities[0].properties[6]);

  /// see [ItemModel.camePrice]
  static final camePrice =
      QueryIntegerProperty<ItemModel>(_entities[0].properties[7]);
}

/// [CategoryModel] entity fields to define ObjectBox queries.
class CategoryModel_ {
  /// see [CategoryModel.id]
  static final id =
      QueryIntegerProperty<CategoryModel>(_entities[1].properties[0]);

  /// see [CategoryModel.name]
  static final name =
      QueryStringProperty<CategoryModel>(_entities[1].properties[1]);

  /// see [CategoryModel.categoryId]
  static final categoryId =
      QueryStringProperty<CategoryModel>(_entities[1].properties[2]);
}
